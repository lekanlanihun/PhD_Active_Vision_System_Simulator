#include "viewer.h"

using namespace std;
using namespace qglviewer;

Viewer::Viewer(QWidget *parent, EXP_Class *_exp, int argc, char** argv /*, Video *_video */ )
  : QGLViewer(QGLFormat(QGL::Rgba),parent)
    //QGL::SampleBuffers |
    //QGL::DoubleBuffer |
    //QGL::DepthBuffer |
    //QGL::Rgba |
    //QGL::AlphaChannel |
    //QGL::StencilBuffer),parent)
{
  exp = _exp;
  //video = _video;
  glutInit(&argc, argv);
  
}


Viewer::~Viewer()
{
  delete[] exp;
}

void Viewer::init()
{

//   //  resizeGL(200, 200);
//   glClearColor(0.0, 0.0, 0.0, 0.0); 
//   //glClearDepth(0.0);
//   glClear(GL_COLOR_BUFFER_BIT );//| GL_DEPTH_BUFFER_BIT );
//   glFlush();
  
//   setGridIsDrawn();
//   setSceneRadius( 300.0 );//300 cm
//   setSceneCenter(Vec(0.0, 0.0, 0.0) );
//   //showEntireScene();

//   camera()->setPosition(Vec(0,200,60));
//   //theta rotates the Camera around its Y axis, and then phi rotates it around its X axis.
//   float theta=M_PI, phi=(3.0*M_PI)/2.0;
//   camera()->setOrientation(theta, phi );
  
//   //initialiser le ciel
//   mySky.LoadTexture( SKY_FRONT, "../IMAGES/sky.jpg" );
//   mySky.LoadTexture( SKY_BACK, "../IMAGES/ground.jpg" );

//   mySky.LoadTexture( SKY_RIGHT,"../IMAGES/brick.jpg" );
//   mySky.LoadTexture( SKY_LEFT, "../IMAGES/sky.jpg" );
//   mySky.LoadTexture( SKY_TOP, "../IMAGES/sky.jpg" );
//   mySky.LoadTexture( SKY_BOTTOM, "../IMAGES/brick.jpg" );

//   /* turn on default lighting */
//   glEnable(GL_LIGHTING);
//   glEnable(GL_LIGHT0);
//   GLfloat ambient[] = { 0.5f, 0.5f, 0.5f };
//   GLfloat diffuse[] = { 0.5f, 0.5f, 0.5f , 0.0f};
//   GLfloat specular[] = { 0.25f, 0.25f, 0.25f , 0.0f};
//   //GLfloat lightcolor[] = { 0.8, 0.8, 0.8 };

//   glLightfv(GL_LIGHT0, GL_AMBIENT, ambient);
//   glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse);
//   glLightfv(GL_LIGHT0, GL_SPECULAR, specular);
}

void Viewer::draw()
{


  // exp->init_single_evaluation();//this is initializes agent position at the beginning of every evaluation or trial

            // exp->param->eye->Set_Eye_Movement(current_x_postion, current_y_postion);
//exp->update_world();//this is called at the beginning of every iteration of neural network


  //exp->param->eye->Set_Eye_Movement();
}


void Viewer::keyPressEvent(QKeyEvent *e)
{
#if QT_VERSION < 0x040000
  if (e->state() == Qt::NoButton)
#else
  if (e->modifiers() == Qt::NoModifier)
#endif
    switch (e->key())
      {
      case Qt::Key_S:         //switch sky
	mySky.switchSky();
	updateGL();
	break;
      default: QGLViewer::keyPressEvent(e);           //handler de la classe superieure
      }
  else
    QGLViewer::keyPressEvent(e);
}

void Viewer::glDrawCircle(double x1, double y1, double radius) {
  
  double x2,y2,angle;
  
  glBegin(GL_TRIANGLE_FAN);
  glVertex2f(x1,y1);
  
  for (angle=1.0f;angle<361.0f;angle+=0.2)
    {
      x2 = x1+sin(angle)*radius;
      y2 = y1+cos(angle)*radius;
      glVertex2f(x2,y2);
    }
  
  glEnd();
}

